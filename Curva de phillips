class CurvaPhillips:
    def __init__(self, inflacion_esperada, nairu,beta): # Aqui se definen los atributos del modelo
      self.inflacion_esperada = inflacion_esperada
      self.nairu = nairu
      self.beta = beta
    def calculo_inflacion(self, desempleo, choque):
      inflacion = self.inflacion_esperada - self.beta * (desempleo - self.nairu) + choque
      return inflacion
Prueba = curvadephillips(2.0,20,15,0.6, 2)
Prueba.calculo_inflacion()
print(f"La inflación calculada es de {inflacion1:.2f}%")
class curvaphillips:
    def __init__(self, inflacion_esperada, nairu,beta,choque_s,choque_d):
      self.inflacion_esperada = inflacion_esperada
      self.nairu = nairu
      self.beta = beta
      self.inflacion_pasada = inflacion_esperada
      self.choque_s = choque_s
      self.choque_d = choque_d
    def nuevas_expectativas(self):
      self.inflacion_esperada = self.inflacion_pasada
    def calculo_inflacion(self, desempleo):
      inflacion = self.inflacion_esperada - self.beta * (desempleo - self.nairu) + (self.choque_s + self.choque_d)
      self.inflacion_pasada = inflacion
      return inflacion
curva2 = curvaphillips(inflacion_esperada = 8.2,nairu = 4.2,beta = 0.4, choque_s = -0.3, choque_d = 0.5)
inflacion2 = curva2.calculo_inflacion(desempleo = 5)
print(f"La inflación calculada es de: {inflacion2: .2f}% ")
curva2.nuevas_expectativas()
inflacion2_1 = curva2.calculo_inflacion(5)
print(f"La inflación con expectativas calculada es de: {inflacion2_1: .2f}% ")
import matplotlib.pyplot as plt

# Crear una instancia del modelo
phillips_curve = PhillipsCurveSophisticated(
    inflation_expectation=3.50,
    natural_unemployment_rate=4.0,
    sensitivity=1,
    shock_supply=0.5,
    shock_demand=0.2
)

# Definir un rango de tasas de desempleo para graficar
unemployment_rates = [ 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0]
inflation_values = []

# Calcular la inflación para cada tasa de desempleo
for rate in unemployment_rates:
    inflation = phillips_curve.calculate_inflation(current_unemployment_rate=rate)
    inflation_values.append(inflation)
    phillips_curve.update_expectations()  # Actualizar expectativas después de cada cálculo

# Graficar la inflación en función de la tasa de desempleo
plt.figure(figsize=(10, 6))
plt.plot(unemployment_rates, inflation_values, marker='o', linestyle='-', color='b', label='Inflación calculada')
plt.axvline(phillips_curve.natural_unemployment_rate, color='r', linestyle='--', label='Tasa de Desempleo Natural (u_n)')
plt.xlabel('Tasa de Desempleo (%)')
plt.ylabel('Inflación (%)')
plt.title('Curva de Phillips con Choques de Oferta y Demanda')
plt.legend()
plt.grid(True)
plt.show()
