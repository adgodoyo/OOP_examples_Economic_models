# -*- coding: utf-8 -*-
"""Oligopolio de Stackerlberg y Competencia Perfecta

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11VGupUK0VUQmjhMn7AeAlYVUSbIyYzKH

## Oligopolio de Stackerlberg

Este modelo se caracteriza por:

1.   Se fijan cantidades, no precios.
2.   Existen 2 empresas, una de ellas es la empresa líder que toma primero la decisión de cuantas cantidades va a producir.
3.   La segunda empresa es la empresa seguidora, que en base a la decisión de la empresa líder decide su cantidad de producción, que, va ser menor a la producción de la empresa lider.
4.   Las decisiones son secuenciales.

## Competencia perfecta
Este modelo se caracteriza por:


1.   Ninguna empresa puede influir en el precio ni las cantidades en el mercado.
2.   Existe información perfecta de los precios y cantidades en el mercado
3.   El precio de mercado es el Cmg de las empresas.
4.   En el punto de equilibrio no existe exceso de oferte ni demanda.
"""

class ModeloCompetencia:
    def __init__(self, costo_marginal, ecuacion_demanda, parametro):
        """
        Inicia los parámetros del modelo:
        - costo_marginal: El costo marginal, asumido igual para ambas empresas.
        - ecuacion_demanda: El término constante 'a' en la ecuación de demanda P = a - bQ.
        - parametro: Es la pendiente 'b' en la ecuación de demanda.
        """
        self.costo_marginal = costo_marginal
        self.demanda = ecuacion_demanda  #a
        self.cantidad_parametro = parametro  # b

    def produccion_lider_stackelberg(self):
        """
        Calcula la cantidad producida por la empresa líder en el modelo de Stackelberg.
        """
        return (self.demanda - self.costo_marginal) / (2 * self.cantidad_parametro)

    def reaccion_seguidora_stackelberg(self, cantidad_lider):
        """
        Calcula la cantidad producida por la empresa seguidora en el modelo de Stackelberg,
        basada en la cantidad producida por la empresa líder.
        """
        return (self.demanda - self.costo_marginal) / (2 * self.cantidad_parametro) - cantidad_lider / 2

    def produccion_competencia_perfecta(self):
        """
        Calcula la cantidad producida por cada empresa en un mercado de competencia perfecta.
        En este caso, ambas empresas producen la misma cantidad porque son precio-aceptantes.
        """
        return (self.demanda - self.costo_marginal) / (2 * self.cantidad_parametro)

    def calcular_precio(self, cantidad_total):
        """
        Calcula el precio del mercado basado en la cantidad total producida.
        """
        return self.demanda - self.cantidad_parametro * cantidad_total

    def calcular_beneficios(self, cantidad, precio):
        """
        Calcula los beneficios para una empresa dada la cantidad producida y el precio de mercado.
        """
        return (precio - self.costo_marginal) * cantidad

    def modelar(self, tipo_modelo="stackelberg"):
        """
        Ejecuta la simulación del modelo seleccionado una vez.
        Puede ser "stackelberg" o "competencia perfecta".
        """
        print(f"\nSimulación del Modelo: {tipo_modelo.capitalize()}")

        if tipo_modelo.lower() == "stackelberg":
            cantidad_lider = self.produccion_lider_stackelberg()
            cantidad_seguidor = self.reaccion_seguidora_stackelberg(cantidad_lider)
        elif tipo_modelo.lower() == "competencia perfecta":
            cantidad_lider = cantidad_seguidor = self.produccion_competencia_perfecta()
        else:
            print("Tipo de modelo no reconocido. Por favor, elige entre 'Stackelberg' o 'Competencia perfecta'.")
            return

        cantidad_total = cantidad_lider + cantidad_seguidor
        precio = self.calcular_precio(cantidad_total)

        beneficio_lider = self.calcular_beneficios(cantidad_lider, precio)
        beneficio_seguidor = self.calcular_beneficios(cantidad_seguidor, precio)

        print(f"  Cantidad líder: {cantidad_lider:.2f}")
        print(f"  Cantidad seguidora: {cantidad_seguidor:.2f}")
        print(f"  Precio: {precio:.2f}")
        print(f"  Beneficio líder: {beneficio_lider:.2f}")
        print(f"  Beneficio seguidora: {beneficio_seguidor:.2f}")

# Ejemplo de uso #N
costo_marginal = int(input("¿Cuál es el costo marginal de las empresas? "))
ecuacion_demanda = int(input("¿Cuál es el corte en la ecuación de la función de precios (a)? "))
parametro = int(input("¿Cuál es la pendiente de la ecuación de la función de precios (b)? "))

modelo = ModeloCompetencia(costo_marginal, ecuacion_demanda, parametro)

# Simulación para el modelo seleccionado #V
tipo_modelo = input("Escoge el modelo (Stackelberg o Competencia perfecta): ")
modelo.modelar(tipo_modelo=tipo_modelo)

"""## Autores:

**Valentina Agudelo**

**Natalia Acosta**

## Tutor
**Daniel Godoy**
"""